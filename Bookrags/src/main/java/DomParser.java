import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class DomParser {

    public static void main(String[] args) {
        File quizDir = new File("quiz");
        File[] quizList = quizDir.listFiles();
        Arrays.sort(quizList);

        try {
            FileWriter answerWriter = new FileWriter(new File("out/" + "Answer" + ".html"));
            for (File quiz : quizList) {
                if (quiz.isDirectory()) continue;

                String title = quiz.getName().split("\\.")[0];
                Document doc = Jsoup.parse(quiz, "UTF-8");
                FileWriter writer = new FileWriter(new File("out/" + title + ".html"));
                writer.write("<html>\n<head>\n<meta charset=\"UTF-8\">\n</head>\n<body>\n");
                writer.write("<h2>" + title + "</h2>\n");

                Elements questionBox = doc.getElementsByClass("questionBox");
                List<Integer> answerList = new ArrayList<>();
                int number = 1;
                writer.write("<ol>\n");
                for (Element question : questionBox) {
                    writer.write("<li><b>" + getQuestion(question.childNode(1)) + "</b>" + getFromChapter(question.childNode(1)) + "</li>\n");
                    writer.write("<ol>\n");
                    for (int i = 1 ; i <= 4 ; i++) {
                        Node node = question.childNode(i*2+1);
                        if (node.attributes().get("class").equals("answer right")) {
                            answerList.add(i);
                        }
                        writer.write("<li>" + getChoice(node) + "</li>\n");
                    }
                    writer.write("</ol>\n");
                    writer.write("<br><br>\n");
                }
                writer.write("</ol>");
                writer.write("<br><br><br><br><br>");
                answerWriter.write("<h2>" + title + " Answer</h2>\n");
                answerWriter.write("<ol>\n");
                for (Integer answer : answerList) {
                    answerWriter.write("<li>" + answer + "</li>\n");
                }
                answerWriter.write("</ol><br><br><br>\n");

                writer.write("</body>\n</html>");
                writer.flush();
                writer.close();
            }
            answerWriter.flush();
            answerWriter.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static String getQuestion(Node node) {
        return node.childNode(3).childNode(0).toString();
    }

    static String getFromChapter(Node node) {
        try {
            return node.childNode(3).childNode(1).childNode(0).toString();
        } catch (Exception e) {
            return "";
        }
    }

    static String getChoice(Node node) {
        return node.childNode(2).toString();
    }
}
